#include <iostream>
#include <cstdlib>
#include <ctime>
#include "Windows.h"

using namespace std;

/*
 - определить константы размера массива символов и сам массив символов, изображающий персонажа игры;
 - вывести построчно массив символов, изображающий персонажа игры;
 - cоздать класс персонажа;
 - добавить поля в класс персонажа, которые будут отвечать за свойства: где персонаж находится, с какой скоростью двигается;
 - объявить методы в классе персонажа, которые будут его способностями двигаться, отрисовываться на экране;
 - реализовать метод рисования персонажа, протестировать его, создав экземпляр класса и вызвав метод рисования;
 - добавить в класс персонажа конструктор, устанавливающий поля в начальные значения;
 - добавить в метод отрисовки зависимость от координаты - смещение вправо с помощью печати пробелов, протестировать конструктор;
 - реализовать метод движения персонажа, при каждом передвижении скорость устанавливать случайную, протестировать метод;
 - создать иллюзию движения: зациклить процесс рисования, перемещения персонажа, ожидания, очищения консоли;
 - определить константу для координаты финиша, добавить отрисовку линии финиша в метод рисования;
 - добавить проверку касания линии финиша, для этого добавить метод получения координаты персонажа, прерывать цикл, если коснулись финиша;
 - создать второго персонажа, отрисовывать и перемещать его в цикле;
 - добавить проверку достижения финиша вторым персонажем;
 - добавить переменную, сообщения о победителе;
 - добавить в метод отрисовки печать скорости и в цикл печать названия игры;
*/

//ракета
/*
{
    "\\_________   ",
    " \\___*____\\__",
    " /________/  ",
    "/            "
}
*/

//единорог
/* 
{
    "    ,",
    "   (>",
    "~(##)",
    "// >\\" 
} 
*/

//танк
 /*  
 {
    "[###}==-:",
    "_/ \\_    ",
    "(x) (x)  " 
}
*/

// константы для массива символов для отрисовки единорога
int const HEIGHT_UNICORN = 4;
int const WIDTH_UNICORN = 6;
//массив символов для отрисовки единорога
char UNICORN[HEIGHT_UNICORN][WIDTH_UNICORN] =
{
    "    ,",
    "   (>",
    "~(##)",
    "// >\\"
};

// константы для массива символов для отрисовки танка
int const HEIGHT_TANK = 3;
int const WIDTH_TANK = 10;
//массив символов для отрисовки танка
char TANK[HEIGHT_TANK][WIDTH_TANK] =
{
    "[###}==-:",
    "_/ \\_   ",
    "(x) (x)  " 
};

// константы для массива символов для отрисовки раккты
int const HEIGHT_ROSCET = 4;
int const WIDTH_ROSCET = 15;
//массив символов для отрисовки ракеты
char ROSCET[HEIGHT_ROSCET][WIDTH_ROSCET] =
{
    "\\_________   ",
    " \\___*____\\__",
    " /________/  ",
    "/            "
};

//константа, определяющая координату линии финиша
const int FINISH = 100;

//класс персонажа
class Sprite
{
private:
    int x; //координата х - смещение персонажа вправо
    int speed;//скорость персонажа
public:
    Sprite();//конструктор персонажа
    void Move();//метод перемещения
    void Draw();//метод отрисовки
    int getX() { return x; }//геттер координаты
};

//конструктор персонажа задает начальную координату и нулевую скорость
Sprite::Sprite()
{
    x = 1;//начальная координата равная 5 немного смещает персонажа от левого края окна
    speed = 0; //вновь созданны персонаж стоит
}

//метод рисования персонажа
void Sprite::Draw()
{
    for (int i = 0; i < HEIGHT_UNICORN; i++)
    {
        //печатаем пробелы, чтобы сместить картинку вправо на x
        for (int j = 0; j < x; j++)
            cout << " ";
        //выводим построчно картинку из массива
        cout << UNICORN[i];
        //печатаем столько пробелов, сколько персонажу не хватает, чтобы добежать до финиша
        for (int j = 0; j < FINISH - x - WIDTH_UNICORN; j++)
            cout << " ";
        //печатаем палочку, чтобы обозначить финиш
        cout << "|" << endl;
    }
    cout << " Скорость: " << speed << endl;//печаем скорость
}

//метод перемещения персонажа
void Sprite::Move()
{
    speed = rand() % 3 + 1;//скорость меняется на каждом шаге и принамает случайные значения от 1 до 3
    x += speed; //делаем шаг, увеличивая х на скорость
}

int main()
{
    system("chcp 1251>nul");
    srand(time(0));//сборс системного времени для правильной работы рандома
    Sprite unicorn1; //создаем первый экземпляр персонажа
    Sprite unicorn2; //создаем первый экземпляр персонажа
    /*unicorn1.Draw(); // рисуем его
    unicorn1.Move(); //перемещаем 
    unicorn1.Draw(); //и снова рисуем*/

    //зацикливаем процесс
    while (true)
    {
        system("cls");//очищаем консоль
        cout << "\n Гонки единорогов!" << endl; //печатаем название игры
        
        unicorn1.Draw();//рисуем персонажа
        unicorn1.Move();//перемещаем персонажа        
        cout << endl;

        unicorn2.Draw();//рисуем персонажа
        unicorn2.Move();//перемещаем персонажа        
        cout << endl;
        //проверяем, достиг ли первый финиша
        if (unicorn1.getX() + WIDTH_UNICORN > 100)
        {
            //сообщаем, что победил первый
            cout << " Победил первый!" << endl;
            //в случае победы прерывваем цикл
            break;
        }
        //проверяем достиг ли второй финиша
        else if (unicorn2.getX() + WIDTH_UNICORN > 100)
        {
            //сообщаем, что победил второй
            cout << " Победил второй!" << endl;
            //в случае победы прерываем цикл
            break;
        }
        Sleep(100);//ожидаем 0.1 сек
    }
    return 0;
}